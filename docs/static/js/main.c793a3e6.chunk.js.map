{"version":3,"sources":["components/TronLinkGuide/index.js","utils/index.js","components/App/index.js","index.js","components/TronLinkGuide/TronLinkLogo.png"],"names":["WEBSTORE_URL","logo","react_default","a","createElement","className","src","TronLinkLogo","alt","openTronLink","window","open","TronLinkGuide","props","_props$installed","installed","onClick","href","target","rel","utils","tronWeb","contract","setTronWeb","_setTronWeb","Object","asyncToGenerator","regenerator_default","mark","_callee","contractAddress","wrap","_context","prev","next","console","log","this","at","sent","stop","_x","_x2","apply","arguments","App","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","balance","gettrxINDCAamount","gettrxSATVAamount","gettrxLEAFamount","gettrxSEEDamount","gettrxTERCamount","gettrxLOCTamount","gettrxMMTamount","gettrxACTIVamount","gettrxKIWIamount","address","INDCAcontractbalance","SATVAcontractbalance","LEAFcontractbalance","SEEDcontractbalance","TRECcontractbalance","LOCTcontractbalance","MMTcontractbalance","ACTIVcontractbalance","KIWIcontractbalance","TRXcontractbalance","newowner","deposittrxvalue","withdrawtrxaddress","withdrawtrxamount","loggedIn","updateINDCAValue","bind","assertThisInitialized","updateSATVAValue","updateLEAFValue","updateSEEDValue","updateTERCValue","updateLOCTValue","updateMMTValue","updateACTIVValue","updateKIWIValue","updateWithdrawTRXAddressValue","updateWithdrawTRXAmountValue","updateDepositTRXValue","updateTransferOwnershipValue","setState","loading","Promise","resolve","tronWebState","ready","_this2","tries","timer","setInterval","TronWeb","clearInterval","defaultAddress","hex","toHex","base58","on","Utils","trx","getAccount","toString","fromHex","parseFloat","getTRC10TokenBalance","getBalance","TERCcontractbalance","_amount","OneToOneSwapTRC10","send","shouldPollResponse","callValue","toSun","then","res","Swal","title","type","catch","err","evt","value","TwoToOneSwapTRC10","FiveToOneSwapTRC10","ACTIVSwapTRC10","_address","withdrawTRX","depositTRX","transferOwnership","_this3","style","color","backgroundColor","height","width","onChange","event","preventDefault","SwapTRXINDCA","SwapTRXSATVA","SwapTRXLEAF","SwapTRXSEED","SwapTRXTERC","SwapTRXLOCT","SwapTRXMMT","SwapTRXACTIV","SwapTRXKIWI","components_TronLinkGuide","React","Component","ReactDOM","render","components_App","document","getElementById","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.c793a3e6.chunk.js","sourcesContent":["import React from 'react';\n\nimport TronLinkLogo from './TronLinkLogo.png';\nimport './TronLinkGuide.scss';\n\nconst WEBSTORE_URL = 'https://chrome.google.com/webstore/detail/ibnejdfjmmkpcnlpebklmnkoeoihofec/';\n\nconst logo = (\n    <div className='logo'>\n        <img src={ TronLinkLogo } alt='TronLink logo' />\n    </div>\n);\n\nconst openTronLink = () => {\n    window.open(WEBSTORE_URL, '_blank');\n};\n\nconst TronLinkGuide = props => {\n    const {\n        installed = false\n    } = props;\n\n    if(!installed) {\n        return (\n            <div className='tronLink' onClick={ openTronLink }>\n                <div className='info'>\n                    <h1>TronLink Required</h1>\n                    <p>\n                        To create a post or tip others you must install TronLink. TronLink is a TRON wallet for the browser\n                        that can be <a href={ WEBSTORE_URL } target='_blank' rel='noopener noreferrer'>installed from the Chrome Webstore</a>.\n                        Once installed, return back and refresh the page.\n                    </p>\n                </div>\n                { logo }\n            </div>\n        );\n    }\n\n    return (\n        <div className='tronLink hover' onClick={ openTronLink }>\n            <div className='info'>\n                <h1>Log in Required</h1>\n                <p>\n                    TronLink is installed but you must first log in. Open TronLink from the browser bar and set up your\n                    first wallet or decrypt a previously-created wallet.\n                </p>\n            </div>\n            { logo }\n        </div>\n    );\n};\n\nexport default TronLinkGuide;","const utils = {\n    tronWeb: false,\n    contract: false,\n\n    async setTronWeb(tronWeb, contractAddress) {\n        console.log('contractAddress', contractAddress)\n        this.tronWeb = tronWeb;\n        this.contract = await tronWeb.contract().at(contractAddress)\n    },\n\n};\n\nexport default utils;\n","import React from 'react';\nimport TronLinkGuide from 'components/TronLinkGuide';\nimport TronWeb from 'tronweb';\nimport Utils from 'utils';\nimport Swal from 'sweetalert2';\n\nimport './App.scss';\n\nconst FOUNDATION_ADDRESS = 'TWiWt5SEDzaEqS6kE5gandWMNfxR2B5xzg';\nconst CONTRACT_ADDRESS = 'THvYD55iZw3YPFjL1nYSphsjzfCMkRoMwH';\nconst INDCA_TOKEN_ID = 1001009;\nconst SATVA_TOKEN_ID = 1001010;\nconst LEAF_TOKEN_ID = 1001864;\nconst SEED_TOKEN_ID = 1000001;\nconst TERC_TOKEN_ID = 1000226;\nconst LOCT_TOKEN_ID = 1000604; \nconst MMT_TOKEN_ID = 1001071;\nconst ACTIV_TOKEN_ID = 1002171;\nconst KIWI_TOKEN_ID = 1001050;\nclass App extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            balance: 0,\n            gettrxINDCAamount: 0,\n            gettrxSATVAamount: 0,\n            gettrxLEAFamount: 0,\n            gettrxSEEDamount: 0,\n            gettrxTERCamount: 0,\n            gettrxLOCTamount: 0,\n            gettrxMMTamount: 0,\n            gettrxACTIVamount: 0,\n            gettrxKIWIamount: 0,\n            address: '',\n            INDCAcontractbalance:0,\n            SATVAcontractbalance:0,\n            LEAFcontractbalance:0,\n            SEEDcontractbalance:0,\n            TRECcontractbalance:0,\n            LOCTcontractbalance:0,\n            MMTcontractbalance:0,\n            ACTIVcontractbalance:0,\n            KIWIcontractbalance:0,\n            TRXcontractbalance:0,\n            newowner:'',\n            deposittrxvalue:0,\n            withdrawtrxaddress:'',\n            withdrawtrxamount:0,\n\n              tronWeb: {\n                  installed: false,\n                  loggedIn: false\n              },\n            }\n        this.updateINDCAValue = this.updateINDCAValue.bind(this)\n        this.updateSATVAValue = this.updateSATVAValue.bind(this)\n        this.updateLEAFValue = this.updateLEAFValue.bind(this)\n        this.updateSEEDValue = this.updateSEEDValue.bind(this)\n        this.updateTERCValue = this.updateTERCValue.bind(this)\n        this.updateLOCTValue = this.updateLOCTValue.bind(this)\n        this.updateMMTValue = this.updateMMTValue.bind(this)\n        this.updateACTIVValue = this.updateACTIVValue.bind(this)\n        this.updateKIWIValue = this.updateKIWIValue.bind(this)\n        this.updateWithdrawTRXAddressValue = this.updateWithdrawTRXAddressValue.bind(this)\n        this.updateWithdrawTRXAmountValue = this.updateWithdrawTRXAmountValue.bind(this)\n        this.updateDepositTRXValue = this.updateDepositTRXValue.bind(this)\n        this.updateTransferOwnershipValue = this.updateTransferOwnershipValue.bind(this)\n\n    }\n\n    async componentDidMount() {\n\n        this.setState({loading:true})\n        await new Promise(resolve => {\n            const tronWebState = {\n                installed: !!window.tronWeb,\n                loggedIn: window.tronWeb && window.tronWeb.ready\n            };\n\n            if(tronWebState.installed) {\n                this.setState({\n                    tronWeb:\n                    tronWebState\n                });\n\n                return resolve();\n            }\n\n            let tries = 0;\n\n            const timer = setInterval(() => {\n                if(tries >= 10) {\n                    const TRONGRID_API = 'https://api.trongrid.io';\n\n                    window.tronWeb = new TronWeb(\n                        TRONGRID_API,\n                        TRONGRID_API,\n                        TRONGRID_API\n                    );\n\n                    this.setState({\n                        tronWeb: {\n                            installed: false,\n                            loggedIn: false\n                        }\n                    });\n\n                    clearInterval(timer);\n                    return resolve();\n                }\n\n                tronWebState.installed = !!window.tronWeb;\n                tronWebState.loggedIn = window.tronWeb && window.tronWeb.ready;\n\n                if(!tronWebState.installed)\n                    return tries++;\n\n                this.setState({\n                    tronWeb: tronWebState,\n                    contractAddress: CONTRACT_ADDRESS,\n                });\n                resolve();\n            }, 100);\n        });\n\n        if(!this.state.tronWeb.loggedIn) {\n            // Set default address (foundation address) used for contract calls\n            // Directly overwrites the address object as TronLink disabled the\n            // function call\n            window.tronWeb.defaultAddress = {\n                hex: window.tronWeb.address.toHex(FOUNDATION_ADDRESS),\n                base58: FOUNDATION_ADDRESS\n            };\n\n            window.tronWeb.on('addressChanged', () => {\n                if(this.state.tronWeb.loggedIn)\n                    return;\n\n                this.setState({\n                    tronWeb: {\n                        installed: true,\n                        loggedIn: true\n                    }\n                });\n            });\n        }\n\n        await Utils.setTronWeb(window.tronWeb, CONTRACT_ADDRESS);\n\n        this.setState({\n            address : Utils.tronWeb.address.fromHex((((await Utils.tronWeb.trx.getAccount()).address).toString())),\n            INDCAcontractbalance : parseFloat((await Utils.contract.getTRC10TokenBalance(INDCA_TOKEN_ID).call()).toString()),\n            SATVAcontractbalance : parseFloat((await Utils.contract.getTRC10TokenBalance(SATVA_TOKEN_ID).call()).toString()),\n            LEAFcontractbalance : parseFloat((await Utils.contract.getTRC10TokenBalance(LEAF_TOKEN_ID).call()).toString()),\n            SEEDcontractbalance : parseFloat((await Utils.contract.getTRC10TokenBalance(SEED_TOKEN_ID).call()).toString()),\n            TERCcontractbalance : parseFloat((await Utils.contract.getTRC10TokenBalance(TERC_TOKEN_ID).call()).toString()),\n            LOCTcontractbalance : parseFloat((await Utils.contract.getTRC10TokenBalance(LOCT_TOKEN_ID).call()).toString()),\n            MMTcontractbalance : parseFloat((await Utils.contract.getTRC10TokenBalance(MMT_TOKEN_ID).call()).toString()),\n            ACTIVcontractbalance : parseFloat((await Utils.contract.getTRC10TokenBalance(ACTIV_TOKEN_ID).call()).toString()),\n            KIWIcontractbalance : parseFloat((await Utils.contract.getTRC10TokenBalance(KIWI_TOKEN_ID).call()).toString()),\n            TRXcontractbalance : parseFloat((await Utils.contract.getBalance().call()).toString())/1000000,\n\n        });\n\n        //await Utils.setTronWeb(window.tronWeb);\n        //console.log(Utils.tronWeb.address.fromHex((((await Utils.tronWeb.trx.getAccount()).address).toString())));  /////// Get account address and info\n        console.log(Utils.contract);\n    }\n\n    /////////////////////////////////////// SwapTRXINDCA /////////////////////////////////\n    async SwapTRXINDCA(_amount){\n\n        Utils.contract.OneToOneSwapTRC10(this.state.address, INDCA_TOKEN_ID).send({\n            shouldPollResponse: true,\n            callValue: Utils.tronWeb.toSun(_amount)\n        }).then(res => Swal({\n            title:'Transfer Successful',\n            type: 'success'\n        })).catch(err => Swal({\n            title:'Transfer Failed',\n            type: 'error'\n        }));\n    }\n\n    updateINDCAValue (evt) {\n        console.log('gettrxINDCAamount : ', this.state.gettrxINDCAamount);\n            this.setState({\n              gettrxINDCAamount: evt.target.value\n            });\n    }\n    /////////////////////////////////////// SwapTRXINDCA /////////////////////////////////\n\n\n\n\n\n\n    /////////////////////////////////////// SwapTRXSATVA /////////////////////////////////\n    async SwapTRXSATVA(_amount){\n\n        Utils.contract.OneToOneSwapTRC10(this.state.address, SATVA_TOKEN_ID).send({\n            shouldPollResponse: true,\n            callValue: Utils.tronWeb.toSun(_amount)\n        }).then(res => Swal({\n            title:'Transfer Successful',\n            type: 'success'\n        })).catch(err => Swal({\n            title:'Transfer Failed',\n            type: 'error'\n        }));\n    }\n\n    updateSATVAValue (evt) {\n        console.log('gettrxSATVAamount : ', this.state.gettrxSATVAamount);\n            this.setState({\n              gettrxSATVAamount: evt.target.value\n            });\n    }\n    /////////////////////////////////////// SwapTRXSATVA /////////////////////////////////\n\n\n\n\n\n    /////////////////////////////////////// SwapTRXLEAF /////////////////////////////////\n    async SwapTRXLEAF(_amount){\n\n        Utils.contract.TwoToOneSwapTRC10(this.state.address, LEAF_TOKEN_ID).send({\n            shouldPollResponse: true,\n            callValue: Utils.tronWeb.toSun(_amount*2)\n        }).then(res => Swal({\n            title:'Transfer Successful',\n            type: 'success'\n        })).catch(err => Swal({\n            title:'Transfer Failed',\n            type: 'error'\n        }));\n    }\n\n    updateLEAFValue (evt) {\n        console.log('gettrxLEAFamount : ', this.state.gettrxLEAFamount);\n            this.setState({\n              gettrxLEAFamount: evt.target.value\n            });\n    }\n    /////////////////////////////////////// SwapTRXLEAF /////////////////////////////////\n\n\n    /////////////////////////////////////// SwapTRXSEED /////////////////////////////////\n    async SwapTRXSEED(_amount){\n\n        Utils.contract.FiveToOneSwapTRC10(this.state.address, SEED_TOKEN_ID).send({\n            shouldPollResponse: true,\n            callValue: Utils.tronWeb.toSun(_amount*5)\n        }).then(res => Swal({\n            title:'Transfer Successful',\n            type: 'success'\n        })).catch(err => Swal({\n            title:'Transfer Failed',\n            type: 'error'\n        }));\n    }\n\n    updateSEEDValue (evt) {\n        console.log('gettrxSEEDamount : ', this.state.gettrxSEEDamount);\n            this.setState({\n              gettrxSEEDamount: evt.target.value\n            });\n    }\n    /////////////////////////////////////// SwapTRXSEED /////////////////////////////////\n\n    /////////////////////////////////////// SwapTRXTERC /////////////////////////////////\n    async SwapTRXTERC(_amount){\n\n        Utils.contract.FiveToOneSwapTRC10(this.state.address, TERC_TOKEN_ID).send({\n            shouldPollResponse: true,\n            callValue: Utils.tronWeb.toSun(_amount*5)\n        }).then(res => Swal({\n            title:'Transfer Successful',\n            type: 'success'\n        })).catch(err => Swal({\n            title:'Transfer Failed',\n            type: 'error'\n        }));\n    }\n\n    updateTERCValue (evt) {\n        console.log('gettrxTERCamount : ', this.state.gettrxTERCamount);\n            this.setState({\n              gettrxTERCamount: evt.target.value\n            });\n    }\n    /////////////////////////////////////// SwapTRXTERC /////////////////////////////////\n\n\n\n    /////////////////////////////////////// SwapTRXLOCT /////////////////////////////////\n    async SwapTRXLOCT(_amount){\n\n        Utils.contract.FiveToOneSwapTRC10(this.state.address, LOCT_TOKEN_ID).send({\n            shouldPollResponse: true,\n            callValue: Utils.tronWeb.toSun(_amount*5)\n        }).then(res => Swal({\n            title:'Transfer Successful',\n            type: 'success'\n        })).catch(err => Swal({\n            title:'Transfer Failed',\n            type: 'error'\n        }));\n    }\n\n    updateLOCTValue (evt) {\n        console.log('gettrxLOCTamount : ', this.state.gettrxLOCTamount);\n            this.setState({\n              gettrxLOCTamount: evt.target.value\n            });\n    }\n    /////////////////////////////////////// SwapTRXLOCT /////////////////////////////////\n\n\n\n    /////////////////////////////////////// SwapTRXMMT /////////////////////////////////\n    async SwapTRXMMT(_amount){\n\n        Utils.contract.FiveToOneSwapTRC10(this.state.address, MMT_TOKEN_ID).send({\n            shouldPollResponse: true,\n            callValue: Utils.tronWeb.toSun(_amount*5)\n        }).then(res => Swal({\n            title:'Transfer Successful',\n            type: 'success'\n        })).catch(err => Swal({\n            title:'Transfer Failed',\n            type: 'error'\n        }));\n    }\n\n    updateMMTValue (evt) {\n        console.log('gettrxMMTamount : ', this.state.gettrxMMTamount);\n            this.setState({\n              gettrxMMTamount: evt.target.value\n            });\n    }\n    /////////////////////////////////////// SwapTRXMMT /////////////////////////////////\n\n\n    /////////////////////////////////////// SwapTRXACTIV /////////////////////////////////\n    async SwapTRXACTIV(_amount){\n\n        Utils.contract.ACTIVSwapTRC10(this.state.address, ACTIV_TOKEN_ID).send({\n            shouldPollResponse: true,\n            callValue: Utils.tronWeb.toSun(_amount*5)\n        }).then(res => Swal({\n            title:'Transfer Successful',\n            type: 'success'\n        })).catch(err => Swal({\n            title:'Transfer Failed',\n            type: 'error'\n        }));\n    }\n\n    updateACTIVValue (evt) {\n        console.log('gettrxACTIVamount : ', this.state.gettrxACTIVamount);\n            this.setState({\n              gettrxACTIVamount: evt.target.value\n            });\n    }\n    /////////////////////////////////////// SwapTRXACTIV /////////////////////////////////\n\n\n    /////////////////////////////////////// SwapTRXKIWI /////////////////////////////////\n    async SwapTRXKIWI(_amount){\n\n        Utils.contract.FiveToOneSwapTRC10(this.state.address, KIWI_TOKEN_ID).send({\n            shouldPollResponse: true,\n            callValue: Utils.tronWeb.toSun(_amount*5)\n        }).then(res => Swal({\n            title:'Transfer Successful',\n            type: 'success'\n        })).catch(err => Swal({\n            title:'Transfer Failed',\n            type: 'error'\n        }));\n    }\n\n    updateKIWIValue (evt) {\n        console.log('gettrxKIWIamount : ', this.state.gettrxKIWIamount);\n            this.setState({\n              gettrxKIWIamount: evt.target.value\n            });\n    }\n    /////////////////////////////////////// SwapTRXKIWI /////////////////////////////////\n\n\n    /////////////////////////////////// withdrawTRX /////////////////////////////\n    withdrawTRX(_address, _amount){\n\n        Utils.contract.withdrawTRX(_address, _amount).send({\n            shouldPollResponse: true,\n            callValue: 0\n        }).then(res => Swal({\n            title:'Transfer Successful',\n            type: 'success'\n        })).catch(err => Swal({\n            title:'Transfer Failed',\n            type: 'error'\n\n        }));\n\n    }\n\n    updateWithdrawTRXAmountValue (evt) {\n        this.setState({\n          withdrawtrxamount: evt.target.value\n        });\n    console.log('withdrawtrxamount : ', this.state.withdrawtrxamount);\n\n    }\n\n    updateWithdrawTRXAddressValue (evt) {\n        this.setState({\n          withdrawtrxaddress: evt.target.value\n        });\n    console.log('withdrawtrxaddress : ', this.state.withdrawtrxaddress);\n\n    }\n    /////////////////////////////////// withdrawTRX END /////////////////////////////\n\n    /////////////////////////////////// depositTRX /////////////////////////////\n    depositTRX(_amount){\n\n        Utils.contract.depositTRX().send({\n            shouldPollResponse: true,\n            callValue: Utils.tronWeb.toSun(_amount)\n        }).then(res => Swal({\n            title:'Transfer Successful',\n            type: 'success'\n        })).catch(err => Swal({\n            title:'Transfer Failed',\n            type: 'error'\n\n        }));\n\n    }\n\n    updateDepositTRXValue (evt) {\n        this.setState({\n          deposittrxvalue: evt.target.value\n        });\n    console.log('deposittrxvalue : ', this.state.deposittrxvalue);\n\n    }\n    /////////////////////////////////// depositTRX END /////////////////////////////\n\n    /////////////////////////////////// transferOwnership /////////////////////////////\n    transferOwnership(_address){\n\n        Utils.contract.transferOwnership(_address).send({\n            shouldPollResponse: true,\n            callValue: 0,\n        }).then(res => Swal({\n            title:'Transfer Successful',\n            type: 'success'\n        })).catch(err => Swal({\n            title:'Transfer Failed',\n            type: 'error'\n\n        }));\n\n    }\n\n    updateTransferOwnershipValue (evt) {\n        this.setState({\n          newowner: evt.target.value\n        });\n    console.log('newowner : ', this.state.newowner);\n\n    }\n    /////////////////////////////////// transferOwnership END /////////////////////////////\n\n\n\n\n\n    render() {\n        if(!this.state.tronWeb.installed)\n            return <TronLinkGuide />;\n\n        if(!this.state.tronWeb.loggedIn)\n            return <TronLinkGuide installed />;\n\n        return (\n              <div className='row'>\n                <div className='col-lg-12 text-center' >\n                  <hr/>\n\n                  <h2 style={{color : 'red' }}>Crypto Cannabis Game Token ATM DApp</h2>\n                  <hr style={{color: 'white', backgroundColor: 'white', height: 0.5}}/>\n                  <br/>\n\n\n\n\n\n\n                  <br/>\n                  <br/>\n                  <h4> Get TRC10 INDCA Tokens in exchange with TRX for 1:1 ratio </h4>\n                  <p> <i> Current TRC10 INDCA Supply in Smart Contract : {this.state.INDCAcontractbalance} </i></p>\n                  <br/>\n                  <p>Type number of INDCA tokens to exchange</p>\n                  <input style={{ width:\"200px\" }} value={this.state.gettrxINDCAamount} onChange={this.updateINDCAValue}/>\n                  <br/>\n                  <br/>\n                  <button className='btn btn-danger' onClick={(event) => {\n                                                                       event.preventDefault()\n                                                                       this.SwapTRXINDCA(this.state.gettrxINDCAamount)\n                                                                     }  }>Swap TRX to INDCA\n                  </button>\n                  <br/>\n                  <br/>\n                  <br/>\n                  <br/>\n                  <br/>\n\n\n\n\n\n\n\n\n                  <br/>\n                  <br/>\n                  <h4> Get TRC10 SATVA Tokens in exchange with TRX for 1:1 ratio </h4>\n                  <p> <i> Current TRC10 SATVA Supply in Smart Contract : {this.state.SATVAcontractbalance} </i></p>\n                  <br/>\n                  <p>Type number of SATVA tokens to exchange</p>\n                  <input style={{ width:\"200px\" }} value={this.state.gettrxSATVAamount} onChange={this.updateSATVAValue}/>\n                  <br/>\n                  <br/>\n                  <button className='btn btn-danger' onClick={(event) => {\n                                                                       event.preventDefault()\n                                                                       this.SwapTRXSATVA(this.state.gettrxSATVAamount)\n                                                                     }  }>Swap TRX to SATVA\n                  </button>\n                  <br/>\n                  <br/>\n                  <br/>\n                  <br/>\n                  <br/>\n\n                  <hr style={{color: 'white', backgroundColor: 'white', height: 0.5}}/>\n\n\n\n\n\n                  <br/>\n                  <br/>\n                  <h4> Get TRC10 LEAF Tokens in exchange with TRX for 2:1 ratio </h4>\n                  <p> <i> Current TRC10 LEAF Supply in Smart Contract : {this.state.LEAFcontractbalance} </i></p>\n                  <br/>\n                  <p>Type number of LEAF tokens to exchange</p>\n                  <input style={{ width:\"200px\" }} value={this.state.gettrxLEAFamount} onChange={this.updateLEAFValue}/>\n                  <br/>\n                  <br/>\n                  <button className='btn btn-danger' onClick={(event) => {\n                                                                       event.preventDefault()\n                                                                       this.SwapTRXLEAF(this.state.gettrxLEAFamount)\n                                                                     }  }>Swap TRX to LEAF\n                  </button>\n                  <br/>\n                  <br/>\n                  <br/>\n                  <br/>\n                  <br/>\n                  <hr style={{color: 'white', backgroundColor: 'white', height: 0.5}}/>\n\n\n\n\n\n\n                  <br/>\n                  <br/>\n                  <h4> Get TRC10 SEED Tokens in exchange with TRX for 5:1 ratio </h4>\n                  <p> <i> Current TRC10 SEED Supply in Smart Contract : {this.state.SEEDcontractbalance} </i></p>\n                  <br/>\n                  <p>Type number of SEED tokens to exchange</p>\n                  <input style={{ width:\"200px\" }} value={this.state.gettrxSEEDamount} onChange={this.updateSEEDValue}/>\n                  <br/>\n                  <br/>\n                  <button className='btn btn-danger' onClick={(event) => {\n                                                                       event.preventDefault()\n                                                                       this.SwapTRXSEED(this.state.gettrxSEEDamount)\n                                                                     }  }>Swap TRX to SEED\n                  </button>\n                  <br/>\n                  <br/>\n                  <br/>\n                  <br/>\n                  <br/>\n\n\n\n\n\n\n\n                  <br/>\n                  <br/>\n                  <h4> Get TRC10 TERC Tokens in exchange with TRX for 5:1 ratio </h4>\n                  <p> <i> Current TRC10 TERC Supply in Smart Contract : {this.state.TERCcontractbalance} </i></p>\n                  <br/>\n                  <p>Type number of TERC tokens to exchange</p>\n                  <input style={{ width:\"200px\" }} value={this.state.gettrxTERCamount} onChange={this.updateTERCValue}/>\n                  <br/>\n                  <br/>\n                  <button className='btn btn-danger' onClick={(event) => {\n                                                                       event.preventDefault()\n                                                                       this.SwapTRXTERC(this.state.gettrxTERCamount)\n                                                                     }  }>Swap TRX to TERC\n                  </button>\n                  <br/>\n                  <br/>\n                  <br/>\n                  <br/>\n                  <br/>\n\n\n\n\n\n\n\n\n                  <br/>\n                  <br/>\n                  <h4> Get TRC10 LOCT Tokens in exchange with TRX for 5:1 ratio </h4>\n                  <p> <i> Current TRC10 LOCT Supply in Smart Contract : {this.state.LOCTcontractbalance} </i></p>\n                  <br/>\n                  <p>Type number of LOCT tokens to exchange</p>\n                  <input style={{ width:\"200px\" }} value={this.state.gettrxLOCTamount} onChange={this.updateLOCTValue}/>\n                  <br/>\n                  <br/>\n                  <button className='btn btn-danger' onClick={(event) => {\n                                                                       event.preventDefault()\n                                                                       this.SwapTRXLOCT(this.state.gettrxLOCTamount)\n                                                                     }  }>Swap TRX to LOCT\n                  </button>\n                  <br/>\n                  <br/>\n                  <br/>\n                  <br/>\n                  <br/>\n\n\n\n\n\n\n\n\n\n                  <br/>\n                  <br/>\n                  <h4> Get TRC10 MMT Tokens in exchange with TRX for 5:1 ratio </h4>\n                  <p> <i> Current TRC10 MMT Supply in Smart Contract : {this.state.MMTcontractbalance} </i></p>\n                  <br/>\n                  <p>Type number of MMT tokens to exchange</p>\n                  <input style={{ width:\"200px\" }} value={this.state.gettrxMMTamount} onChange={this.updateMMTValue}/>\n                  <br/>\n                  <br/>\n                  <button className='btn btn-danger' onClick={(event) => {\n                                                                       event.preventDefault()\n                                                                       this.SwapTRXMMT(this.state.gettrxMMTamount)\n                                                                     }  }>Swap TRX to MMT\n                  </button>\n                  <br/>\n                  <br/>\n                  <br/>\n                  <br/>\n                  <br/>\n\n\n\n\n\n\n\n                  <br/>\n                  <br/>\n                  <h4> Get TRC10 ACTIV Tokens in exchange with TRX for 5:1 ratio </h4>\n                  <p> <i> Current TRC10 ACTIV Supply in Smart Contract : {this.state.ACTIVcontractbalance} </i></p>\n                  <br/>\n                  <p>Type number of ACTIV tokens to exchange</p>\n                  <input style={{ width:\"200px\" }} value={this.state.gettrxACTIVamount} onChange={this.updateACTIVValue}/>\n                  <br/>\n                  <br/>\n                  <button className='btn btn-danger' onClick={(event) => {\n                                                                       event.preventDefault()\n                                                                       this.SwapTRXACTIV(this.state.gettrxACTIVamount)\n                                                                     }  }>Swap TRX to ACTIV\n                  </button>\n                  <br/>\n                  <br/>\n                  <br/>\n                  <br/>\n                  <br/>\n\n\n\n\n\n\n\n\n\n\n\n                  <br/>\n                  <br/>\n                  <h4> Get TRC10 KIWI Tokens in exchange with TRX for 5:1 ratio </h4>\n                  <p> <i> Current TRC10 KIWI Supply in Smart Contract : {this.state.KIWIcontractbalance} </i></p>\n                  <br/>\n                  <p>Type number of KIWI tokens to exchange</p>\n                  <input style={{ width:\"200px\" }} value={this.state.gettrxKIWIamount} onChange={this.updateKIWIValue}/>\n                  <br/>\n                  <br/>\n                  <button className='btn btn-danger' onClick={(event) => {\n                                                                       event.preventDefault()\n                                                                       this.SwapTRXKIWI(this.state.gettrxKIWIamount)\n                                                                     }  }>Swap TRX to KIWI\n                  </button>\n                  <br/>\n                  <br/>\n                  <br/>\n                  <br/>\n                  <br/>\n\n\n\n\n\n\n                  <hr style={{color: 'red', backgroundColor: 'red', height: 0.5}}/>\n                  <p style={{color: 'red'}}> <i> *For Official Use Only </i></p>\n\n                  <p> <i> Current TRX Supply in Smart Contract : {this.state.TRXcontractbalance} </i></p>\n\n\n\n\n\n\n                  <br/>\n                  <p> Address of transfer : </p>\n                  <input style={{ width:\"400px\" }} value={this.state.withdrawtrxaddress} onChange={this.updateWithdrawTRXAddressValue}/>\n                  <br/>\n                  <br/>\n                  <p> Amount to transfer from contract : </p>\n                  <input style={{ width:\"80px\" }} value={this.state.withdrawtrxamount} onChange={this.updateWithdrawTRXAmountValue}/>\n                  <br/>\n                  <br/>\n                  <button className='btn btn-danger' onClick={(event) => {\n                                                                       event.preventDefault()\n                                                                       this.withdrawTRX(this.state.withdrawtrxaddress, this.state.withdrawtrxamount)\n                                                                     }  }>Withdraw\n                  </button>\n                  <br/>\n                  <br/>\n\n\n\n\n\n\n                  <br/>\n                  <p> Amount to deposit in Smart Contract : </p>\n                  <input style={{ width:\"80px\" }} value={this.state.deposittrxvalue} onChange={this.updateDepositTRXValue}/>\n                  <br/>\n                  <br/>\n                  <button className='btn btn-danger' onClick={(event) => {\n                                                                       event.preventDefault()\n                                                                       this.depositTRX(this.state.deposittrxvalue)\n                                                                     }  }>Deposit\n                  </button>\n                  <br/>\n                  <br/>\n\n\n\n\n\n\n\n                  <br/>\n                  <p> Address of new Owner : </p>\n                  <input style={{ width:\"400px\" }} value={this.state.newowner} onChange={this.updateTransferOwnershipValue}/>\n                  <br/>\n                  <br/>\n                  <button className='btn btn-danger' onClick={(event) => {\n                                                                       event.preventDefault()\n                                                                       this.transferOwnership(this.state.newowner)\n                                                                     }  }>Transfer Ownership\n                  </button>\n                  <br/>\n                  <br/>\n                  <hr style={{color: 'red', backgroundColor: 'red', height: 0.5}}/>\n\n\n\n\n\n\n\n\n\n\n                  <br/>\n                  <br/>\n                </div>\n              </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","module.exports = __webpack_public_path__ + \"static/media/TronLinkLogo.d3a8f115.png\";"],"sourceRoot":""}